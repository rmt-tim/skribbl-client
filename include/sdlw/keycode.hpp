#ifndef SDLW_KEYCODE_INCLUDED
#define SDLW_KEYCODE_INCLUDED

#include <SDL_keycode.h>

#include "sdlw/detail/utility.hpp"

namespace sdl {

// clang-format off

enum class keycode {
    unknown             = SDLK_UNKNOWN,
    return_             = SDLK_RETURN,
    escape              = SDLK_ESCAPE,
    backspace           = SDLK_BACKSPACE,
    tab                 = SDLK_TAB,
    space               = SDLK_SPACE,
    exclaim             = SDLK_EXCLAIM,
    quoted_bl           = SDLK_QUOTEDBL,
    hash                = SDLK_HASH,
    percent             = SDLK_PERCENT,
    dollar              = SDLK_DOLLAR,
    ampersand           = SDLK_AMPERSAND,
    quote               = SDLK_QUOTE,
    left_paren          = SDLK_LEFTPAREN,
    right_paren         = SDLK_RIGHTPAREN,
    asterisk            = SDLK_ASTERISK,
    plus                = SDLK_PLUS,
    comma               = SDLK_COMMA,
    minus               = SDLK_MINUS,
    period              = SDLK_PERIOD,
    slash               = SDLK_SLASH,
    _0                  = SDLK_0,
    _1                  = SDLK_1,
    _2                  = SDLK_2,
    _3                  = SDLK_3,
    _4                  = SDLK_4,
    _5                  = SDLK_5,
    _6                  = SDLK_6,
    _7                  = SDLK_7,
    _8                  = SDLK_8,
    _9                  = SDLK_9,
    colon               = SDLK_COLON,
    semicolon           = SDLK_SEMICOLON,
    less                = SDLK_LESS,
    equals              = SDLK_EQUALS,
    greater             = SDLK_GREATER,
    question            = SDLK_QUESTION,
    at                  = SDLK_AT,
    left_bracket        = SDLK_LEFTBRACKET,
    backslash           = SDLK_BACKSLASH,
    right_bracket       = SDLK_RIGHTBRACKET,
    caret               = SDLK_CARET,
    underscore          = SDLK_UNDERSCORE,
    backquote           = SDLK_BACKQUOTE,
    a                   = SDLK_a,
    b                   = SDLK_b,
    c                   = SDLK_c,
    d                   = SDLK_d,
    e                   = SDLK_e,
    f                   = SDLK_f,
    g                   = SDLK_g,
    h                   = SDLK_h,
    i                   = SDLK_i,
    j                   = SDLK_j,
    k                   = SDLK_k,
    l                   = SDLK_l,
    m                   = SDLK_m,
    n                   = SDLK_n,
    o                   = SDLK_o,
    p                   = SDLK_p,
    q                   = SDLK_q,
    r                   = SDLK_r,
    s                   = SDLK_s,
    t                   = SDLK_t,
    u                   = SDLK_u,
    v                   = SDLK_v,
    w                   = SDLK_w,
    x                   = SDLK_x,
    y                   = SDLK_y,
    z                   = SDLK_z,
    caps_lock           = SDLK_CAPSLOCK,
    f1                  = SDLK_F1,
    f2                  = SDLK_F2,
    f3                  = SDLK_F3,
    f4                  = SDLK_F4,
    f5                  = SDLK_F5,
    f6                  = SDLK_F6,
    f7                  = SDLK_F7,
    f8                  = SDLK_F8,
    f9                  = SDLK_F9,
    f10                 = SDLK_F10,
    f11                 = SDLK_F11,
    f12                 = SDLK_F12,
    printscreen         = SDLK_PRINTSCREEN,
    scroll_lock         = SDLK_SCROLLLOCK,
    pause               = SDLK_PAUSE,
    insert              = SDLK_INSERT,
    home                = SDLK_HOME,
    pageup              = SDLK_PAGEUP,
    delete_             = SDLK_DELETE,
    end                 = SDLK_END,
    pagedown            = SDLK_PAGEDOWN,
    right               = SDLK_RIGHT,
    left                = SDLK_LEFT,
    down                = SDLK_DOWN,
    up                  = SDLK_UP,
    numlock_clear       = SDLK_NUMLOCKCLEAR,
    kp_divide           = SDLK_KP_DIVIDE,
    kp_multiply         = SDLK_KP_MULTIPLY,
    kp_minus            = SDLK_KP_MINUS,
    kp_plus             = SDLK_KP_PLUS,
    kp_enter            = SDLK_KP_ENTER,
    kp_1                = SDLK_KP_1,
    kp_2                = SDLK_KP_2,
    kp_3                = SDLK_KP_3,
    kp_4                = SDLK_KP_4,
    kp_5                = SDLK_KP_5,
    kp_6                = SDLK_KP_6,
    kp_7                = SDLK_KP_7,
    kp_8                = SDLK_KP_8,
    kp_9                = SDLK_KP_9,
    kp_0                = SDLK_KP_0,
    kp_period           = SDLK_KP_PERIOD,
    application         = SDLK_APPLICATION,
    power               = SDLK_POWER,
    kp_equals           = SDLK_KP_EQUALS,
    f13                 = SDLK_F13,
    f14                 = SDLK_F14,
    f15                 = SDLK_F15,
    f16                 = SDLK_F16,
    f17                 = SDLK_F17,
    f18                 = SDLK_F18,
    f19                 = SDLK_F19,
    f20                 = SDLK_F20,
    f21                 = SDLK_F21,
    f22                 = SDLK_F22,
    f23                 = SDLK_F23,
    f24                 = SDLK_F24,
    execute             = SDLK_EXECUTE,
    help                = SDLK_HELP,
    menu                = SDLK_MENU,
    select              = SDLK_SELECT,
    stop                = SDLK_STOP,
    again               = SDLK_AGAIN,
    undo                = SDLK_UNDO,
    cut                 = SDLK_CUT,
    copy                = SDLK_COPY,
    paste               = SDLK_PASTE,
    find                = SDLK_FIND,
    mute                = SDLK_MUTE,
    volume_up           = SDLK_VOLUMEUP,
    volume_down         = SDLK_VOLUMEDOWN,
    kp_comma            = SDLK_KP_COMMA,
    kp_equals_as400     = SDLK_KP_EQUALSAS400,
    alt_erase           = SDLK_ALTERASE,
    sysreq              = SDLK_SYSREQ,
    cancel              = SDLK_CANCEL,
    clear               = SDLK_CLEAR,
    prior               = SDLK_PRIOR,
    return2             = SDLK_RETURN2,
    separator           = SDLK_SEPARATOR,
    out                 = SDLK_OUT,
    oper                = SDLK_OPER,
    clear_again         = SDLK_CLEARAGAIN,
    cr_sel              = SDLK_CRSEL,
    ex_sel              = SDLK_EXSEL,
    kp_00               = SDLK_KP_00,
    kp_000              = SDLK_KP_000,
    thousands_separator = SDLK_THOUSANDSSEPARATOR,
    decimal_separator   = SDLK_DECIMALSEPARATOR,
    currency_unit       = SDLK_CURRENCYUNIT,
    currency_subunit    = SDLK_CURRENCYSUBUNIT,
    kp_left_paren       = SDLK_KP_LEFTPAREN,
    kp_right_paren      = SDLK_KP_RIGHTPAREN,
    kp_left_brace       = SDLK_KP_LEFTBRACE,
    kp_right_brace      = SDLK_KP_RIGHTBRACE,
    kp_tab              = SDLK_KP_TAB,
    kp_backspace        = SDLK_KP_BACKSPACE,
    kp_a                = SDLK_KP_A,
    kp_b                = SDLK_KP_B,
    kp_c                = SDLK_KP_C,
    kp_d                = SDLK_KP_D,
    kp_e                = SDLK_KP_E,
    kp_f                = SDLK_KP_F,
    kp_xor              = SDLK_KP_XOR,
    kp_power            = SDLK_KP_POWER,
    kp_percent          = SDLK_KP_PERCENT,
    kp_less             = SDLK_KP_LESS,
    kp_greater          = SDLK_KP_GREATER,
    kp_ampersand        = SDLK_KP_AMPERSAND,
    kp_dbl_ampersand    = SDLK_KP_DBLAMPERSAND,
    kp_vertical_bar     = SDLK_KP_VERTICALBAR,
    kp_dbl_vertical_bar = SDLK_KP_DBLVERTICALBAR,
    kp_colon            = SDLK_KP_COLON,
    kp_hash             = SDLK_KP_HASH,
    kp_space            = SDLK_KP_SPACE,
    kp_at               = SDLK_KP_AT,
    kp_exclam           = SDLK_KP_EXCLAM,
    kp_mem_store        = SDLK_KP_MEMSTORE,
    kp_mem_recall       = SDLK_KP_MEMRECALL,
    kp_mem_clear        = SDLK_KP_MEMCLEAR,
    kp_mem_add          = SDLK_KP_MEMADD,
    kp_mem_subtract     = SDLK_KP_MEMSUBTRACT,
    kp_mem_multiply     = SDLK_KP_MEMMULTIPLY,
    kp_mem_divide       = SDLK_KP_MEMDIVIDE,
    kp_plus_minus       = SDLK_KP_PLUSMINUS,
    kp_clear            = SDLK_KP_CLEAR,
    kp_clear_entry      = SDLK_KP_CLEARENTRY,
    kp_binary           = SDLK_KP_BINARY,
    kp_octal            = SDLK_KP_OCTAL,
    kp_decimal          = SDLK_KP_DECIMAL,
    kp_hexadecimal      = SDLK_KP_HEXADECIMAL,
    lctrl               = SDLK_LCTRL,
    lshift              = SDLK_LSHIFT,
    lalt                = SDLK_LALT,
    lgui                = SDLK_LGUI,
    rctrl               = SDLK_RCTRL,
    rshift              = SDLK_RSHIFT,
    ralt                = SDLK_RALT,
    rgui                = SDLK_RGUI,
    mode                = SDLK_MODE,
    audio_next          = SDLK_AUDIONEXT,
    audio_prev          = SDLK_AUDIOPREV,
    audio_stop          = SDLK_AUDIOSTOP,
    audio_play          = SDLK_AUDIOPLAY,
    audio_mute          = SDLK_AUDIOMUTE,
    media_select        = SDLK_MEDIASELECT,
    www                 = SDLK_WWW,
    mail                = SDLK_MAIL,
    calculator          = SDLK_CALCULATOR,
    computer            = SDLK_COMPUTER,
    ac_search           = SDLK_AC_SEARCH,
    ac_home             = SDLK_AC_HOME,
    ac_back             = SDLK_AC_BACK,
    ac_forward          = SDLK_AC_FORWARD,
    ac_stop             = SDLK_AC_STOP,
    ac_refresh          = SDLK_AC_REFRESH,
    ac_bookmarks        = SDLK_AC_BOOKMARKS,
    brightness_down     = SDLK_BRIGHTNESSDOWN,
    brightness_up       = SDLK_BRIGHTNESSUP,
    display_switch      = SDLK_DISPLAYSWITCH,
    kbdillum_toggle     = SDLK_KBDILLUMTOGGLE,
    kbdillum_down       = SDLK_KBDILLUMDOWN,
    kbdillum_up         = SDLK_KBDILLUMUP,
    eject               = SDLK_EJECT,
    sleep               = SDLK_SLEEP,
    app1                = SDLK_APP1,
    app2                = SDLK_APP2,
    audio_rewind        = SDLK_AUDIOREWIND,
    audio_fast_forward  = SDLK_AUDIOFASTFORWARD
};

enum keymod : u16 {
    keymod_none     = KMOD_NONE,
    keymod_lshift   = KMOD_LSHIFT,
    keymod_rshift   = KMOD_RSHIFT,
    keymod_lctrl    = KMOD_LCTRL,
    keymod_rctrl    = KMOD_RCTRL,
    keymod_lalt     = KMOD_LALT,
    keymod_ralt     = KMOD_RALT,
    keymod_lgui     = KMOD_LGUI,
    keymod_rgui     = KMOD_RGUI,
    keymod_num      = KMOD_NUM,
    keymod_caps     = KMOD_CAPS,
    keymod_mode     = KMOD_MODE,
    keymod_reserved = KMOD_RESERVED
};

/* SDLW_DETAIL_DEFINE_FLAG_OPERATIONS(keymod) */

// clang-format on

} // namespace sdl

#endif // SDLW_KEYCODE_INCLUDED
